name: Daily Scraper

on:
  schedule:
    - cron: "0 3 * * *"      # Every day at 03:00 UTC
  workflow_dispatch:         # Allow manual run

permissions:
  contents: write

jobs:
  run-scraper:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget unzip xvfb

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Setup directories
        run: |
          mkdir -p text_storage
          mkdir -p /tmp/chrome-user-data
          chmod 755 /tmp/chrome-user-data

      - name: Run daily scraper
        run: |
          python daily_scraper.py

      - name: Commit changes
        id: commit
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_REF_NAME:-main}"

          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add changes.md text_storage || true

          if git diff --staged --quiet; then
            echo "no_changes=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          git commit -m "ðŸ”„ Daily scrape update: $(date -u '+%Y-%m-%d %H:%M:%S') UTC"

          # Rebase on latest remote to avoid 'rejected - fetch first'
          git fetch origin "$BRANCH"
          git pull --rebase origin "$BRANCH"

          # Push committed changes back to the same branch
          git push origin HEAD:"$BRANCH"

          echo "no_changes=false" >> "$GITHUB_OUTPUT"

      - name: Send Telegram notification
        if: steps.commit.outputs.no_changes == 'false'
        run: |
          # Read the changes.md file
          CHANGES_CONTENT=$(cat changes.md)
          
          # Function to send Telegram message
          send_telegram_message() {
            local message="$1"
            curl -s -X POST \
                 "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
                 -H "Content-Type: application/json" \
                 -d "{
                   \"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\",
                   \"text\": \"$message\",
                   \"parse_mode\": \"HTML\"
                 }"
          }
          
          # Split content into chunks of max 3500 characters (safe for Telegram with your format)
          MAX_LENGTH=3500
          CURRENT_CHUNK=""
          CHUNK_NUMBER=1
          
          # Read changes.md line by line and build chunks
          while IFS= read -r line; do
            # If adding this line would exceed max length, send current chunk and start new one
            if [ ${#CURRENT_CHUNK} -gt 0 ] && [ $((${#CURRENT_CHUNK} + ${#line} + 200)) -gt $MAX_LENGTH ]; then
              # Format current chunk with your preferred format
              TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S')
              MESSAGE="ðŸ”„ <b>Daily Scraper Update</b>\n\n<b>Changes detected:</b>\n<pre><code>$CURRENT_CHUNK</code></pre>\n\n<i>Updated at: $TIMESTAMP UTC</i>"
              send_telegram_message "$MESSAGE"
              CURRENT_CHUNK=""
              CHUNK_NUMBER=$((CHUNK_NUMBER + 1))
              sleep 1  # Small delay between messages
            fi
            
            # Add line to current chunk
            if [ ${#CURRENT_CHUNK} -eq 0 ]; then
              CURRENT_CHUNK="$line"
            else
              CURRENT_CHUNK="$CURRENT_CHUNK\n$line"
            fi
          done < changes.md
          
          # Send the last chunk if there's anything left
          if [ ${#CURRENT_CHUNK} -gt 0 ]; then
            TIMESTAMP=$(date -u '+%Y-%m-%d %H:%M:%S')
            MESSAGE="ðŸ”„ <b>Daily Scraper Update</b>\n\n<b>Changes detected:</b>\n<pre><code>$CURRENT_CHUNK</code></pre>\n\n<i>Updated at: $TIMESTAMP UTC</i>"
            send_telegram_message "$MESSAGE"
          fi


